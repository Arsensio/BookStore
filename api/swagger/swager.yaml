openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'BookStore API'
  description: 'An REST API of book store. Allows you to CRUD books, authors, genres, publishers. Also you can create an account and make orders'
  contact:
    name: Arsen
    email: arsenulykbekov9@gmail.com

servers:
  - url: "http://localhost:8080/"

paths:
  /books:
    description: Book resource. Get all books, post a book
    get:
      tags:
        - books
      description: Get information from book store database about all books
      parameters:
        - name: page
          in: query
          description: The page which you wanna get
          schema:
            type: integer
        - name: size
          in: query
          description: The amount of elements in one page
          schema:
            type: integer
      responses:
        200:
          description: Successfully returned array of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/bookDTO'
    post:
      tags:
        - books
      description: Add a new Book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveBookDTO'
      responses:
        200:
          description: Successfully added book
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bookDTO"

  /books/{id}:
    description: Get, delete, update book based on id path parameter
    get:
      tags:
        - books
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully returned Book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bookDTO'
        400:
          description: Bad request. Ivalid id format!
        404:
          description: Book not found. Invalid ID supplied!
    delete:
      tags:
        - books
      description: Delete the book by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully deleted Book
        400:
          description: Invalid ID supplied
        404:
          description: Book not found

  /books/update/{id}:
    put:
      tags:
        - books
      description: Update an existing book
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/saveBookDTO"
      responses:
        200:
          description: Successfully updated Book
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bookDTO"

  /books/name:
    description: Get, All Boook based on name query parameter
    get:
      tags:
        - books
      parameters:
        - in: query
          name: name
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully returned books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/bookDTO'

  /books/authors:
    description: Get, All Boooks based with author name containing on name query parameter
    get:
      tags:
        - books
      parameters:
        - in: query
          name: name
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully returned books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/bookDTO'

  /books/genre:
    description: Get, All Boooks based on list of genreson name query parameter
    get:
      tags:
        - books
      parameters:
        - in: query
          name: values
          required: true
          schema:
            type: array
            items:
              type: integer
      responses:
        200:
          description: Successfully returned books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/bookDTO'


  # -------------------------------------------------------------------------------------
  #------------------------------------Authors-------------------------------------------

  /authors:
    description: Author Resource
    post:
      tags:
        - authors
      description: Create a new Author
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveAuthorDTO'
      responses:
        201:
          description: Author successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authorDTO'
    get:
      tags:
        - authors
      description: Get information from author store database about all authors
      parameters:
        - name: page
          in: query
          description: The page which you wanna get
          schema:
            type: integer
        - name: size
          in: query
          description: The amount of elements in one page
          schema:
            type: integer
      responses:
        200:
          description: Successfully returned array of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/authorDTO'

  /authors/{id}:
    description: Get, Delete Author based on ID path parameter
    get:
      tags:
        - authors
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully returned Author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authorDTO'
        400:
          description: Invalid ID supplied
        404:
          description: Author not found
    put:
      tags:
        - authors
      description: Update an existing Author
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveAuthorDTO'
      responses:
        200:
          description: Successfully updated Author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authorDTO'
    delete:
      tags:
        - authors
      description: Delete an Author by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully deleted Author
        400:
          description: Invalid ID supplied
        404:
          description: Author not found


  /authors/name:
    description: Get, Delete Author based on ID path parameter
    get:
      tags:
        - authors
      parameters:
        - in: query
          name: name
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully returned Authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/authorDTO'

  /authors/genre:
    description: Get, Delete Author based on ID path parameter
    get:
      tags:
        - authors
      parameters:
        - in: query
          name: values
          required: true
          schema:
            type: array
            items:
              type: integer
      responses:
        200:
          description: Successfully returned Authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/authorDTO'

  # -------------------------------------------------------------------------------------
  # ---------------------------------Publishers------------------------------------------

  /publishers:
    description: Publisher Resource
    get:
      tags:
        - publishers
      responses:
        200:
          description: Successfully returned Publisher
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/publisherDTO'
    post:
      tags:
        - publishers
      description: Create a new Publisher
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/savePublisherDTO'
      responses:
        200:
          description: Publisher successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publisherDTO'

  /publishers/{id}:
    description: Get, Delete Publisher based on ID path parameter
    get:
      tags:
        - publishers
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully returned Publisher
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publisherDTO'
        400:
          description: Invalid ID supplied
        404:
          description: Publisher not found
    put:
      tags:
        - publishers
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      description: Update an existing Publisher By Id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/savePublisherDTO'
      responses:
        200:
          description: Successfully updated Publisher
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publisherDTO'

    delete:
      tags:
        - publishers
      description: Delete an Publisher by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully deleted Publisher
        400:
          description: Invalid ID supplied
        404:
          description: Publisher not found

  /publishers/name:
    description: Get Publisher based on name containing
    get:
      tags:
        - publishers
      parameters:
        - in: query
          name: name
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully returned Publisher
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publisherDTO'
        400:
          description: Invalid ID supplied
        404:
          description: Publisher not found


  # -------------------------------------------------------------------------------------
  # -----------------------------------Genres--------------------------------------------

  /genres:
    description: Genre Resource
    get:
      tags:
        - genres
      responses:
        200:
          description: Successfully returned Genres
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/genreDTO'

    post:
      tags:
        - genres
      description: Create a new genre
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveGenreDTO'
      responses:
        200:
          description: Genre successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genreDTO'

  /genres/{id}:
    description: Get, Delete Genre based on ID path parameter
    get:
      tags:
        - genres
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully returned Genre
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genreDTO'
        400:
          description: Invalid ID supplied
        404:
          description: Genre not found
    put:
      tags:
        - genres
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      description: Update an existing Genre By Id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveGenreDTO'
      responses:
        200:
          description: Successfully updated Genre
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genreDTO'

    delete:
      tags:
        - genres
      description: Delete an Genre by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully deleted Genre
        400:
          description: Invalid ID supplied
        404:
          description: Genre not found
  /genres/name:
    description: Get Genre based on name containing
    get:
      tags:
        - genres
      parameters:
        - in: query
          name: name
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully returned Publisher
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publisherDTO'
        400:
          description: Invalid ID supplied
        404:
          description: Publisher not found


  # -------------------------------------------------------------------------------------
  # -----------------------------------Users---------------------------------------------

  /users:
    description: User Resource
    get:
      tags:
        - users
      responses:
        200:
          description: return a current registered user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userDTO'
    post:
      tags:
        - users
      description: Create a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveUserDTO'
      responses:
        200:
          description: Genre successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userDTO'

  /users/{id}:
    description: Get, Delete User based on ID path parameter
    get:
      tags:
        - users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: user wirh {id}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userDTO'
        403:
          description: forbiden, only users with role Admin can get access for information about another user
    delete:
      tags:
        - users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: user succesfully deleted
        403:
          description: only admim can delete others users

  /users/name:
    description: Get User based on ID path parameter
    get:
      tags:
        - users
      parameters:
        - in: query
          name: name
          required: true
          schema:
            type: string
      responses:
        200:
          description: user wirh name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userDTO'
        404:
          description: User not found
  /users/admin/users:
    description: Get All Users
    get:
      tags:
        - users
      responses:
        200:
          description: all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/userDTO'
        403:
          description: Only admin have acces for all users

  /users/update/username:
    description: update current user's username
    put:
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/saveUserDTO"
      responses:
        200:
          description: username successfully updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/userDTO'
        400:
          description: username already registered
  
  /users/update/password:
    description: update current user's password
    put:
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/saveUserDTO"
      responses:
        200:
          description: password successfully updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/userDTO'

  /users/update/admin/role/{id}:
    description: Admin update user's role
    put:
      tags:
        - users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/saveUserDTO"
      responses:
        200:
          description: password successfully updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/userDTO'


  # -------------------------------------------------------------------------------------
  # -----------------------------------Orders--------------------------------------------

  /orders:
    description: Orders Resource
    get:
      tags:
        - orders
      responses:
        200:
          description: return a current registered user's orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/orderDTO'
    post:
      tags:
        - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveOrderDTO'
      responses:
        200:
          description: return new order
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/orderDTO'
        400:
          description: bad request
  /orders/{id}:
    get:
      tags:
        - orders
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: order with param id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderDTO'
        404:
          description: not found
        403:
          description: do not have access to others order
    delete:
      tags:
        - orders
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: order with param id deleted

  /orders/update/{id}:
    put:
      description: update current user's order books and its quantities by id
      tags:
        - orders
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveOrderDTO'
      responses:
        200:
          description: user's order with param id updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderDTO'

  /orders/update/admin/{id}:
    put:
      description: admin update status of any order
      tags:
        - orders
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveOrderDTO'
      responses:
        200:
          description: user's order with param id updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderDTO'

  /orders/admin/orders:
    get:
      description: admin get all orders
      tags:
        - orders
      responses:
        200:
          description: return new order
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/orderDTO'


  # -------------------------------------------------------------------------------------
  # -----------------------------------Authentication--------------------------------------
  /auth/login:
    post:
      description: post method to login
      tags:
        - authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authenticationRequestDTO'
      responses:
        200:
          description: return a username, user's role, token
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/response'

# -------------------------------------------------------------------------------------
# ----------------------------------Components-----------------------------------------

components:
  schemas:
    # -------------------------------------------------------------------------------------
    # -------------------------------------Book--------------------------------------------
    bookDTO:
      type: object
      properties:
        id:
          type: integer
          example: 0
        price:
          type: number
          format: double
          example: 4000.0
        authorList:
          type: array
          items:
            type: string
            example: ['Fyodor Dostoevsky', 'Hovard Lovecraft']
        publisher:
          type: string
          example: 'ACT'
        name:
          type: string
          example: 'Clean Code'
        numOfpages:
          type: integer
          example: 300
        yearOfIssue:
          type: integer
          example: 1992
        genres:
          type: array
          items:
            type: string
            example: ['mystic', 'thriller']
        bookQuantity:
          type: integer
          example: 2
        bookImage:
          type: string
          example: "https://simg.marwin.kz/media/catalog/product/cache/41deb699a7fea062a8915debbbb0442c/c/o/akunin_b_doroga_v_kitej.jpg"
    saveBookDTO:
      type: object
      properties:
        id:
          type: integer
          example: 0
        price:
          type: number
          format: double
          example: 4000.0
        authors:
          type: array
          items:
            type: integer
            example: [1, 2]
        publisherId:
          type: integer
          example: 2
        name:
          type: string
          example: 'Clean Code'
        numberOfPages:
          type: integer
          example: 300
        yearOfIssue:
          type: integer
          example: 1992
        genres:
          type: array
          items:
            type: integer
            example: [0, 7]
        bookQuantity:
          type: integer
          example: 2
        bookImage:
          type: string
          example: "https://simg.marwin.kz/media/catalog/product/cache/41deb699a7fea062a8915debbbb0442c/c/o/akunin_b_doroga_v_kitej.jpg"

    #--------------------------------------------------------------------------------------
    # ----------------------------------Author---------------------------------------------
    
    
    authorDTO:
      type: object
      properties:
        id:
          type: integer
          example: 0
        firstName:
          type: string
          example: Leo
        lastName:
          type: string
          example: Tolstoy
        patronymic:
          type: string
          example: Nikolayevich
        dateOfBirth:
          type: string
          format: date
          example: 1828-09-09
        books:
          type: array
          items:
            $ref: '#/components/schemas/bookDTO'
        genres:
          type: array
          items:
            type: string
            example: ['mystic', 'thriller']

    saveAuthorDTO:
      type: object
      properties:
        firstName:
          type: string
          example: Leo
        lastName:
          type: string
          example: Tolstoy
        patronymic:
          type: string
          example: Nikolayevich
        dateOfBirth:
          type: string
          format: date
          example: 1828-09-09


    # -------------------------------------------------------------------------------------
    # ---------------------------------Publisher-------------------------------------------
    publisherDTO:
      type: object
      properties:
        id:
          type: integer
          example: 0
        name:
          type: string
          example: ACT
        listOfBook:
          type: array
          items:
            $ref: '#/components/schemas/bookDTO'

    savePublisherDTO:
      type: object
      properties:
        name:
          type: string
          example: ACT

    # -------------------------------------------------------------------------------------
    #-----------------------------------Genres---------------------------------------------
    genreDTO:
      type: object
      properties:
        id:
          type: integer
          example: 0
        name:
          type: string
          example: mystic
    
    saveGenreDTO:
      type: object
      properties:
        name:
          type: string
          example: mystic

    # -------------------------------------------------------------------------------------
    # ------------------------------------Users-------------------------------------------
    userDTO:
      type: object
      properties:
        id:
          type: integer
          example: 0
        username:
          type: string
          example: admin
        password:
          type: string
          example: $2a$10$87/Elk7ApmPm8wusEAqssOq5NHh0MwO6SnjrmJYbRd44vDb4VfeAq
        role:
          type: string
          example: USER
        isBlocked:
          type: boolean
          example: false



    saveUserDTO:
      type: object
      properties:
        username:
          type: string
          example: admin
        password:
          type: string
          example: mypassword
        role:
          type: string
          example: USER
        blocked:
          type: boolean
          example: false

    # -------------------------------------------------------------------------------------
    # ------------------------------------Orders------------------------------------------
    orderDTO:
      type: object
      properties:
        id:
          type: integer
          example: 17
        user_id:
          type: integer
          example: 1
        status:
          type: string
          example: accepted
        books:
          type: array
          items:
            type: integer
            example: [1,2]
        quantity:
          type: array
          items:
            type: integer
            example: [2,2]
        createdAt:
          type: string
          format: date
          example: 2022-09-09

    saveOrderDTO:
      type: object
      properties:
        id:
          type: integer
          example: 17
        user_id:
          type: integer
          example: 2
        status:
          type: string
          example: accepted
        books:
          type: array
          items:
            type: integer
            example: [1,2]
        quantity:
          type: array
          items:
            type: integer
            example: [2,2]

    # -------------------------------------------------------------------------------------
    # ------------------------------------Authentication-------------------------------------

    authenticationRequestDTO:
      type: object
      properties:
        username:
          type: string
          example: arsensio
        password:
          type: string
          example: 123456

    response:
      type: object
      properties:
        username:
          type: string
          example: arsensio
        role:
          type: string
          example: ADMIN
        token:
          type: string
          example: Bearer_eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTY2MDI4NTE0NywiZXhwIjoxNjYwMjk1OTQ3fQ.h4Z9vx9_vzrEEUOv49h0gzWlrHzaMM4Z8CJP6eZ5Ph0