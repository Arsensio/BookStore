/*
 * BoockStore
 * Special API for BookStore
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: arsenulykbekov9@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.Book;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BooksApi
 */
@Ignore
public class BooksApiTest {

    private final BooksApi api = new BooksApi();

    
    /**
     * Add a new book to the store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBookTest() throws ApiException {
        Book body = null;
        api.addBook(body);

        // TODO: test validations
    }
    
    /**
     * Deletes a book
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBookTest() throws ApiException {
        Long bookId = null;
        api.deleteBook(bookId);

        // TODO: test validations
    }
    
    /**
     * Finds Book by Author
     *
     * Multiple status values can be provided with comma separated strings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findBookByAuthorTest() throws ApiException {
        List<String> author = null;
        List<Book> response = api.findBookByAuthor(author);

        // TODO: test validations
    }
    
    /**
     * Finds Book by name
     *
     * Multiple status values can be provided with comma separated strings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findBooksByNameTest() throws ApiException {
        List<String> name = null;
        List<Book> response = api.findBooksByName(name);

        // TODO: test validations
    }
    
    /**
     * Find book by ID
     *
     * Returns a single pet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBooktByIdTest() throws ApiException {
        Long bookId = null;
        Book response = api.getBooktById(bookId);

        // TODO: test validations
    }
    
    /**
     * Update an existing book
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBookTest() throws ApiException {
        Book body = null;
        api.updateBook(body);

        // TODO: test validations
    }
    
    /**
     * Updates a book in the store with form data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBookWithFormTest() throws ApiException {
        Long bookId = null;
        String name = null;
        BigDecimal price = null;
        api.updateBookWithForm(bookId, name, price);

        // TODO: test validations
    }
    
}
